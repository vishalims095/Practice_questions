loconst stripe = require('stripe')('sk_live_xxx');

async function createTransfer() {
    try {
        const transfer = await stripe.transfers.create({
            amount: 1000, // Amount in cents
            currency: 'usd',
            destination: 'acct_xxxx', // Connected account ID
            metadata: { transaction_id: 'txn_123456' }
        });

        console.log('Transfer Created:', transfer.id);
    } catch (error) {
        console.error('Error creating transfer:', error);
    }
}

createTransfer();




const express = require('express');
const bodyParser = require('body-parser');
const stripe = require('stripe')('sk_live_xxx');

const app = express();
app.use(bodyParser.json());

app.post('/webhook', async (req, res) => {
    const event = req.body;

    if (event.type === 'payment_intent.succeeded') {
        const paymentIntent = event.data.object;
        const transferId = paymentIntent.transfer_data?.destination; // Get transfer ID

        if (transferId) {
            try {
                const transfer = await stripe.transfers.retrieve(transferId);
                const transactionId = transfer.metadata.transaction_id;
                console.log(`Transaction ID: ${transactionId}`);
            } catch (error) {
                console.error('Error retrieving transfer:', error);
            }
        }
    }

    res.sendStatus(200);
});

app.listen(3000, () => console.log('Webhook listening on port 3000'));


How It Works
✅ Create Transfer: The metadata field in stripe.transfers.create() stores the custom transaction ID.
✅ Webhook Event: When a payment is successful (payment_intent.succeeded), the webhook retrieves the transfer_id.
✅ Retrieve Transaction ID: The script fetches the metadata.transaction_id from the transfer.


const stripe = require("stripe")("sk_live_YOUR_SECRET_KEY"); // Replace with your secret key

async function getAccountIdFromBankId(bankAccountId) {
    try {
        // Fetch all accounts and find the one linked to the bank ID
        const accounts = await stripe.accounts.list({ limit: 100 });

        for (const account of accounts.data) {
            const externalAccounts = await stripe.accounts.listExternalAccounts(account.id, { object: "bank_account" });

            for (const bank of externalAccounts.data) {
                if (bank.id === bankAccountId) {
                    console.log("Account ID:", account.id);
                    return account.id;
                }
            }
        }

        console.log("Account ID not found for Bank ID:", bankAccountId);
        return null;
    } catch (error) {
        console.error("Error retrieving account ID:", error);
    }
}
// transfer
async function createPaymentIntent(params) {
   const paymentIntent = await stripe.paymentIntents.create({
      amount: 5000, // $50.00
      currency: 'aud',
      payment_method: 'pm_card_visa', // Use test payment method or real saved one
      //confirm: true, // Confirm the payment immediately
      application_fee_amount: 1000, // $10 platform fee
      automatic_payment_methods: {
        enabled: true,
        allow_redirects: 'never',
        },
      transfer_data: {
        destination: 'acct_1Qkj9CPjLXSIEhGG', // Connected account ID
      },
    });

    console.log('✅ PaymentIntent succeeded:', paymentIntent.id);
    const confirmedIntent = await stripe.paymentIntents.confirm(
    paymentIntent.id,
    { payment_method: 'pm_card_visa' }
    );
}

// Example usage:
getAccountIdFromBankId("ba_xxxx");





